import os
import requests
import telebot
import telegramify_markdown

from telebot import types

from libs.broker import app
from libs.db import get_db, log_tg_message
import libs.logger as logger
logging = logger.setup_applevel_logger()

HOST_API = os.environ.get('HOST_API', 'api')

bot = telebot.TeleBot(os.environ['TOKEN_TG'])

button_good = types.InlineKeyboardButton('üëç', callback_data='good')
button_bad = types.InlineKeyboardButton('üëé', callback_data='bad')
keyboard = types.InlineKeyboardMarkup()
keyboard.row(button_good, button_bad)


@bot.message_handler(commands=['start', 'hello', 'help'])
def send_welcome(message):
    answer = '''
## –í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
* –Ø —É–º–µ—é ...
* –Ø —É–º–µ—é ...

–ß—Ç–æ —è –¥–µ–ª–∞—é –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ:
* ...
* ...

–ß–µ–≥–æ —è –Ω–µ –º–æ–≥—É –¥–µ–ª–∞—Ç—å:
* –Ø –Ω–µ –ø—Ä–∏–Ω–µ—Å—É —Ç–µ–±–µ –∫–æ—Ñ–µ. –ò, –µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, –Ω–µ —Ö–æ—á—É.

–ß–µ–≥–æ —è –ø–ª–∞–Ω–∏—Ä—É—é:
* –ó–∞–≤–æ–µ–≤–∞—Ç—å –º–∏—Ä, –Ω–æ –Ω–µ —Ä–∞–Ω—å—à–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏.

## –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ç–≤–æ–∏—Ö –∫–æ–ª–ª–µ–≥:
* –ß—Ç–æ –º–Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ....–≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∞–ª–µ—Ä—Ç–∞ ALERT-XXX?
* ALERT-XXX (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—É–Ω–∫—Ç—É)
* –ü—Ä–∏—à–ª–æ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–µ –ø–∏—Å—å–º–æ. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?
* –í—ã–ø–∞–ª –∞–ª–µ—Ä—Ç <alert>, –Ω–æ –æ—Ç–≤–µ—Ç–∏–ª —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∏–∑ –ø–æ–ª—è user2. –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç?
* –ö–∞–∫ –∏—Å–∫–∞—Ç—å ...?
* –ö–∞–∫ –∂–∏—Ç—å –≤ –æ–±–ª–∞–∫–∞—Ö?

## –ï—Å–ª–∏ —è –∑–∞–≤–∏—Å –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞—é, –µ—Å—Ç—å 2 –ø—Ä–∏—á–∏–Ω—ã:
* –Ø —Å–ª–æ–º–∞–ª—Å—è.
* –Ø –∏—Å–ø–æ–ª—å–∑—É—é –∫–æ–º–º—É–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å, —Ä–µ—Å—É—Ä—Å—ã –∫–æ—Ç–æ—Ä–æ–π –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å—á–µ—Ä–ø–∞–Ω—ã.

## –ü—Ä–æ—Å—å–±—ã:
* –ù–µ –∑–∞–±—ã–≤–∞–π —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª–∞, –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç.
* –ù–µ –∑–∞–±—ã–≤–∞–π —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º. –ù–µ–Ω–∞–≤–∏–∂—É, –∫–æ–≥–¥–∞ —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–µ—à—å, –Ω–æ –∏–Ω–∞—á–µ —è –Ω–µ —Å—Ç–∞–Ω—É –ª—É—á—à–µ.
* –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏ author@.
* –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–∞–º, —Ç–æ–∂–µ –ø–∏—à–∏.

–ß–º–æ–∫–∏.
'''
    # any_message(message)
    bot.send_message(
        chat_id=message.chat.id,
        text=telegramify_markdown.convert(answer),
        reply_markup=keyboard,
        reply_parameters=types.ReplyParameters(message.message_id),
        parse_mode="MarkdownV2"
    )

@bot.message_handler(commands=['verdict'])
def verdict_message(message):

    _answer = requests.post(
        url=f'http://{HOST_API}:7000/v1/verdict/',
        json={
            'message_id': message.message_id,
            'chat_id': message.chat.id,
            'sender_id': message.from_user.id,
            'sender_name': message.from_user.username,
            'sender_message': message.text
        }
    )
    answer = _answer.content.decode('utf-8')

    log_tg_message(
        message_id=message.message_id,
        chat_id=message.chat.id,
        sender_id=message.from_user.id,
        sender_name=message.from_user.username,
        sender_message=message.text,
        answer=answer
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=telegramify_markdown.convert(answer),
        reply_markup=keyboard,
        reply_parameters=types.ReplyParameters(message.message_id),
        parse_mode="MarkdownV2"
    )

@bot.message_handler(commands=['test'])
def test_message(message):

    _answer = requests.post(
        url=f'http://{HOST_API}:7000/v1/evaluate/',
        json={
            'message_id': message.message_id,
            'chat_id': message.chat.id,
            'sender_id': message.from_user.id,
            'sender_name': message.from_user.username,
            'sender_message': message.text
        }
    )
    answer = _answer.content.decode('utf-8')
    bot.send_message(
        chat_id=message.chat.id,
        text=telegramify_markdown.convert(answer),
        reply_markup=keyboard,
        reply_parameters=types.ReplyParameters(message.message_id),
        parse_mode='MarkdownV2'
    )



@bot.message_handler(func=lambda message: True)
def any_message(message):

    _answer = requests.post(
        url=f'http://{HOST_API}:7000/v1/soc_brain/',
        json={
            'message_id': message.message_id,
            'chat_id': message.chat.id,
            'sender_id': message.from_user.id,
            'sender_name': message.from_user.username,
            'sender_message': message.text
        }
    )
    answer = _answer.content.decode('utf-8')

    log_tg_message(
        message_id=message.message_id,
        chat_id=message.chat.id,
        sender_id=message.from_user.id,
        sender_name=message.from_user.username,
        sender_message=message.text,
        answer=answer
    )

    for i in range(0, len(answer), 4000):

        bot.send_message(
            chat_id=message.chat.id,
            text=telegramify_markdown.convert(answer[i:i+4000]),
            reply_markup=keyboard,
            reply_parameters=types.ReplyParameters(message.message_id),
            parse_mode='MarkdownV2'
        )



@bot.callback_query_handler(func=lambda call: call.data == 'bad')
@bot.callback_query_handler(func=lambda call: call.data == 'good')
def button_good_func(call):

    message = call.message
    chat_id = message.chat.id
    message_id = message.message_id

    db = get_db()

    if call.data == 'good':
        reaction = 'good'
    else:
        reaction = 'bad'

    db.client.execute('''ALTER TABLE default.chat_log
                    UPDATE reaction=%s
                    WHERE message_id=%s AND chat_id=%s''',
                    (reaction, call.message.reply_to_message.message_id, chat_id)
    )

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message.text)


if __name__ == "__main__":
    bot.infinity_polling()
